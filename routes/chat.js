const express = require('express');
const router = express.Router();

// Armazenamento tempor√°rio das conversas (em produ√ß√£o seria um banco de dados)
let conversas = {};
let mensagensHistorico = {};

// Base de conhecimento do bot
const baseConhecimento = {
    saudacao: ['oi', 'ol√°', 'hello', 'bom dia', 'boa tarde', 'boa noite', 'hey'],
    despedida: ['tchau', 'bye', 'at√© logo', 'obrigado', 'obrigada', 'valeu'],
    destinos: {
        keywords: ['destino', 'viagem', 'onde', 'pa√≠s', 'cidade', 'lugar'],
        response: 'Temos destinos incr√≠veis! Alguns dos mais procurados s√£o:\n‚Ä¢ Europa: Fran√ßa, It√°lia, Espanha\n‚Ä¢ Am√©rica: Estados Unidos, Argentina, Peru\n‚Ä¢ √Åsia: Jap√£o, Tail√¢ndia, Singapura\n\nQual regi√£o te interessa mais?'
    },
    pacotes: {
        keywords: ['pacote', 'pre√ßo', 'valor', 'quanto custa', 'or√ßamento'],
        response: 'Nossos pacotes s√£o personalizados! Os pre√ßos variam de acordo com:\n‚Ä¢ Destino escolhido\n‚Ä¢ Dura√ß√£o da viagem\n‚Ä¢ Tipo de hospedagem\n‚Ä¢ √âpoca do ano\n\nGostaria de fazer uma cota√ß√£o personalizada?'
    },
    documentos: {
        keywords: ['documento', 'passaporte', 'visto', 'identidade', 'rg'],
        response: 'Para viagens internacionais voc√™ precisa:\n‚Ä¢ Passaporte v√°lido (6 meses de validade)\n‚Ä¢ Visto (dependendo do destino)\n‚Ä¢ Certificado de vacina√ß√£o (alguns pa√≠ses)\n\nPara viagens nacionais: RG ou CNH bastam!'
    },
    pagamento: {
        keywords: ['pagamento', 'parcelamento', 'cart√£o', 'pix', 'boleto'],
        response: 'Oferecemos v√°rias formas de pagamento:\n‚Ä¢ PIX (5% de desconto)\n‚Ä¢ Cart√£o de cr√©dito (at√© 12x sem juros)\n‚Ä¢ Boleto banc√°rio\n‚Ä¢ Transfer√™ncia banc√°ria\n\nTamb√©m temos planos de parcelamento especiais!'
    },
    seguro: {
        keywords: ['seguro', 'assist√™ncia', 'emerg√™ncia', 'm√©dico'],
        response: 'O seguro viagem √© essencial! Cobrimos:\n‚Ä¢ Assist√™ncia m√©dica 24h\n‚Ä¢ Cancelamento de viagem\n‚Ä¢ Bagagem extraviada\n‚Ä¢ Morte acidental\n\nTodos os nossos pacotes incluem seguro!'
    },
    covid: {
        keywords: ['covid', 'coronavirus', 'pandemia', 'vacina', 'teste'],
        response: 'Para viagens durante a pandemia:\n‚Ä¢ Verifique as restri√ß√µes do destino\n‚Ä¢ Comprovante de vacina√ß√£o pode ser necess√°rio\n‚Ä¢ Teste PCR/Ant√≠geno em alguns casos\n\nNosso time atualiza as informa√ß√µes diariamente!'
    }
};

// Fun√ß√£o para processar mensagem do usu√°rio
function processarMensagem(mensagem, sessionId) {
    const msg = mensagem.toLowerCase().trim();
    
    // Verificar sauda√ß√µes
    if (baseConhecimento.saudacao.some(palavra => msg.includes(palavra))) {
        return {
            tipo: 'bot',
            texto: 'Ol√°! üëã Sou o assistente virtual da Eco Companion!\n\nComo posso te ajudar hoje? Posso tirar d√∫vidas sobre:\n‚Ä¢ Destinos e pacotes\n‚Ä¢ Documenta√ß√£o necess√°ria\n‚Ä¢ Formas de pagamento\n‚Ä¢ Seguro viagem\n\nFique √† vontade para perguntar!'
        };
    }
    
    // Verificar despedidas
    if (baseConhecimento.despedida.some(palavra => msg.includes(palavra))) {
        return {
            tipo: 'bot',
            texto: 'Foi um prazer te ajudar! üòä\n\nSe precisar de mais alguma coisa, estarei aqui 24/7.\n\nBoa viagem e at√© a pr√≥xima! ‚úàÔ∏è'
        };
    }
    
    // Verificar t√≥picos espec√≠ficos
    for (const [topico, dados] of Object.entries(baseConhecimento)) {
        if (typeof dados === 'object' && dados.keywords) {
            if (dados.keywords.some(keyword => msg.includes(keyword))) {
                return {
                    tipo: 'bot',
                    texto: dados.response
                };
            }
        }
    }
    
    // Resposta padr√£o para perguntas n√£o reconhecidas
    return {
        tipo: 'bot',
        texto: 'Interessante pergunta! ü§î\n\nAinda estou aprendendo sobre esse assunto. Voc√™ gostaria de:\n\n‚Ä¢ Falar com um de nossos consultores humanos?\n‚Ä¢ Navegar pela nossa se√ß√£o de destinos?\n‚Ä¢ Ver nossos pacotes promocionais?\n\nOu pode reformular sua pergunta de outra forma!'
    };
}

// Rota principal do chat
router.get('/', (req, res) => {
    res.render('chat/index', {
        titulo: 'Chat de Atendimento - Eco Companion',
        descricao: 'Tire suas d√∫vidas sobre viagens conosco',
        currentPage: 'chat'
    });
});

// API para enviar mensagem
router.post('/api/enviar', (req, res) => {
    try {
        const { mensagem, sessionId } = req.body;
        
        if (!mensagem || !sessionId) {
            return res.status(400).json({ erro: 'Mensagem e sessionId s√£o obrigat√≥rios' });
        }
        
        // Inicializar conversa se n√£o existir
        if (!conversas[sessionId]) {
            conversas[sessionId] = [];
            mensagensHistorico[sessionId] = [];
        }
        
        // Adicionar mensagem do usu√°rio
        const mensagemUsuario = {
            id: Date.now(),
            tipo: 'usuario',
            texto: mensagem,
            timestamp: new Date()
        };
        
        conversas[sessionId].push(mensagemUsuario);
        
        // Processar resposta do bot
        const respostaBot = processarMensagem(mensagem, sessionId);
        respostaBot.id = Date.now() + 1;
        respostaBot.timestamp = new Date();
        
        conversas[sessionId].push(respostaBot);
        
        // Limitar hist√≥rico a 50 mensagens
        if (conversas[sessionId].length > 50) {
            conversas[sessionId] = conversas[sessionId].slice(-50);
        }
        
        res.json({
            sucesso: true,
            resposta: respostaBot,
            totalMensagens: conversas[sessionId].length
        });
        
    } catch (error) {
        console.error('Erro no chat:', error);
        res.status(500).json({ erro: 'Erro interno do servidor' });
    }
});

// API para buscar hist√≥rico
router.get('/api/historico/:sessionId', (req, res) => {
    try {
        const { sessionId } = req.params;
        const historico = conversas[sessionId] || [];
        
        res.json({
            sucesso: true,
            mensagens: historico,
            total: historico.length
        });
        
    } catch (error) {
        console.error('Erro ao buscar hist√≥rico:', error);
        res.status(500).json({ erro: 'Erro interno do servidor' });
    }
});

// API para limpar conversa
router.delete('/api/limpar/:sessionId', (req, res) => {
    try {
        const { sessionId } = req.params;
        
        if (conversas[sessionId]) {
            delete conversas[sessionId];
        }
        
        res.json({ sucesso: true, mensagem: 'Conversa limpa com sucesso' });
        
    } catch (error) {
        console.error('Erro ao limpar conversa:', error);
        res.status(500).json({ erro: 'Erro interno do servidor' });
    }
});

// API para transferir para atendente humano
router.post('/api/transferir-humano', (req, res) => {
    try {
        const { sessionId, motivo } = req.body;
        
        // Em produ√ß√£o, isso seria integrado com um sistema de tickets
        console.log(`Solicita√ß√£o de transfer√™ncia - Session: ${sessionId}, Motivo: ${motivo}`);
        
        res.json({
            sucesso: true,
            mensagem: 'Transferindo para um consultor humano...',
            estimativaEspera: '2-5 minutos'
        });
        
    } catch (error) {
        console.error('Erro na transfer√™ncia:', error);
        res.status(500).json({ erro: 'Erro interno do servidor' });
    }
});

// Estat√≠sticas do chat (para admin)
router.get('/api/estatisticas', (req, res) => {
    try {
        const stats = {
            conversasAtivas: Object.keys(conversas).length,
            totalMensagens: Object.values(conversas).reduce((acc, conv) => acc + conv.length, 0),
            mediaMensagensPorConversa: Object.keys(conversas).length > 0 ? 
                Object.values(conversas).reduce((acc, conv) => acc + conv.length, 0) / Object.keys(conversas).length : 0,
            ultimaAtividade: new Date()
        };
        
        res.json({ sucesso: true, estatisticas: stats });
        
    } catch (error) {
        console.error('Erro nas estat√≠sticas:', error);
        res.status(500).json({ erro: 'Erro interno do servidor' });
    }
});

module.exports = router;